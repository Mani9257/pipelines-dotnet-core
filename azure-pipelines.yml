# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  SonarToken: '554831c2d756d3aae0d1b3a09d634917d1aec8d5'

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'
#- task: PowerShell@2
 # inputs:
  #  filePath: '$(System.DefaultWorkingDirectory)\*\get-sonarqube-quality-gate-status.ps1'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube'
    scannerMode: 'MSBuild'
    projectKey: 'java-project_java-project'
    projectName: 'java-project'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'

- task: SonarQubeAnalyze@5


- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
- task: PowerShell@2
  displayName: QGcheck-with-UP
  inputs:
    targetType: 'inline'
    script: |
      $credPair = "admin:Devops@2448"
      
      # Step 2. Encode the pair to Base64 string
      $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))
      
      # Step 3. Form the header and add the Authorization attribute to it
      $headers = @{ Authorization = "Basic $encodedCredentials" }
      
      # Step 4. Make the GET request
      $responseData = Invoke-WebRequest -Uri http://35.170.71.8:9000/api/project_badges/quality_gate?project=java-project_java-project -Method Get -Headers $headers -UseBasicParsing
      
      write-host $responseData.content
      
      $x = $responseData.content | ConvertTo-Json | write-host
      $sonarQualityGateResult = $x.projectStatus.status
      
      if($sonarQualityGateResult.status -eq "SONARQUBE QUALITY GATE FAIL"){
      write-host "CI failed due to Sonarqube quality Gate"
      }
    errorActionPreference: 'default'


#- task: PowerShell@2
  #inputs:
    #targetType: 'inline'
    #script: |
      #$token = [System.Text.Encoding]::UTF8.GetBytes($env:SonarToken + ":")
      #$base64 = [System.Convert]::ToBase64String($token)
       
      #$basicAuth = [string]::Format("Basic {0}", $base64)
      #$headers = @{ Authorization = $basicAuth }
       
      #$result = Invoke-RestMethod -Method Get -Uri http://35.170.71.8:9000/api/qualitygates/project_status?projectKey=java-project_java-project -Headers $headers
      #$result | ConvertTo-Json | Write-Host
       
      #if ($result.projectStatus.status -eq "OK") {
      #Write-Host "Quality Gate Succeeded"
      #}else{
      #throw "Quality gate failed"
      #}
    #errorActionPreference: 'continue'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $branch = "$(Build.SourceBranch)"
      $branch = $branch -replace 'refs\/heads\/',''
                
      cmd.exe /c  $env:CMDPATH $env:REPO $branch
               
      Write-Host "first"
      $branch = $branch -replace '\/','-'
      Write-Host $branch
      $json=Get-Content $env:JSONPATH\$branch.json | ConvertFrom-Json
      Write-Host "second"
      Write-Host $json.projectStatus.status
      if ($json.projectStatus.status -eq "OK") {
      Write-Host "Quality Gate Succeeded"
      }else{
      throw "Quality gate failed"
      }